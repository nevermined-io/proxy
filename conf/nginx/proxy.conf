js_import conf.d/oauth2.js; # apt install nginx-module-njs

# Using $http_nvm_authorization because client needs to send the 
# JWT in the 'Authorization' header.
# If want to use regular 'Authorization' header replace by $http_authorization
map $http_nvm_authorization $access_token {
    "~*^bearer (.*)$" $1;
    default $http_nvm_authorization;
}

# This is where token introspection responses will be stored if proxy_cache is enabled
proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;

server {
    # Regular HTTP
    listen 3128; 
    # Use TLS in production
    listen 443 ssl default_server;
    
    server_name _;
    ssl_certificate         /ssl/certs/tls.crt;
    ssl_certificate_key     /ssl/certs/tls.key;    
    proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    ssl_verify_client	    off;

    # OAuth 2.0 Token Introspection configuration
    resolver 8.8.8.8;                  # For DNS lookup of OAuth server
    subrequest_output_buffer_size 16k; # To fit a complete response from OAuth server
    error_log /var/log/nginx/error.log debug; # Enable to see introspection details

    # For Oauth Authentication with the introspection server
    # Not used for now because the introspection server is 'internal'
    #set $oauth_client_id          "";
    #set $oauth_client_secret      "oauth-token";

    set $_protocol $http_x_forwarded_proto;
    if ($http_x_forwarded_proto !~ (http|https)) {
        set $_protocol $scheme;
    }
    if ($_protocol !~ (http|https)) {
        set $_protocol "https";
    }
    set $requested_url            "$_protocol://$http_host$request_uri";

    if ($env_introspection_url = "") {
        set $env_introspection_url "http://127.0.0.1:4000/introspect";
    }

    location / {
        auth_request /_oauth2_token_introspection;

        proxy_intercept_errors      on;
        proxy_ssl_certificate       /ssl/certs/tls.crt;
        proxy_ssl_certificate_key   /ssl/certs/tls.key;

        proxy_ssl_protocols		    TLSv1 TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers			HIGH:!aNULL:!MD5;
        proxy_ssl_verify		    on;
        proxy_ssl_server_name       on;       

        proxy_set_header            X-Real-IP $remote_addr;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_redirect              off;
        proxy_http_version          1.1;               

        # Any member of the token introspection response is available as $sent_http_token_member
        auth_request_set            $user_id $sent_http_token_user_id;
        proxy_set_header            NVM-User-id $user_id;

        auth_request_set            $scope      $sent_http_token_scope;
        proxy_set_header            NVM-Scope   $scope;

        auth_request_set            $upstream_host  $sent_http_token_upstream_host;

        # We overwrite the "Authorization" header with the decripted auth token coming from the DDO
        auth_request_set            $service_token  $sent_http_token_service_token;
        proxy_set_header            Authorization   "Bearer $service_token";
        proxy_set_header            Host            $upstream_host;

        # We clean original NVM Authorization header with JWT
        # proxy_set_header          NVM-Authorization "";
        
        #debug
        add_header X-uri            "$env_introspection_url"; 
        add_header X-p              "$_protocol";
        
        # Proxy pass to the final url requested by the user	
        proxy_pass                  $_protocol://$upstream_host$uri$is_args$args;
    }

    location = /_oauth2_token_introspection {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.
        internal;
        js_content oauth2.introspectAccessToken;
    }

    location = /_oauth2_send_introspection_request {
        # This location is called by introspectAccessToken(). We use the proxy_
        # directives to construct an OAuth 2.0 token introspection request, as per:
        #  https://tools.ietf.org/html/rfc7662#section-2
        internal;
        gunzip on; # Decompress if necessary

        proxy_method      POST;
        
        
        proxy_set_header            Content-Type "application/x-www-form-urlencoded";
        proxy_set_header            Accept "application/json";
        # To validate if the requested url is granted we need to pass it to the Oauth server
        proxy_set_header            NVM-Requested-Url "$requested_url";
        proxy_pass                  $env_introspection_url;        
        #proxy_pass                 http://127.0.0.1:4000/introspect;

        ## Uncomment if want to enable disk cache
        #proxy_cache           token_responses; # Enable caching of token introspection responses
        #proxy_cache_key       $access_token;   # Cache the response for each unique access token
        #proxy_cache_lock      on;              # Don't allow simultaneous requests for same token
        #proxy_cache_valid     200 10s;         # How long to use cached introspection responses
        #proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server
        #proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
    }
}

# vim: syntax=nginx
